{"version":3,"sources":["assets/img/spinner.gif","Redux/github/github.reducer.js","components/GithubProfileCard.js","components/GithubProfileDetails.js","components/GithubProfile.js","components/GithubRepos.js","components/githubCredentials.js","components/spinner/Spinner.js","components/GithubSearchApp.js","Redux/github/github.action.js","Redux/github/github.actionTypes.js","Redux/root.reducer.js","Redux/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","loading","profile","repos","errorMessage","GithubProfileCard","profileInfo","useSelector","state","Fragment","className","src","avatar_url","alt","name","bio","href","html_url","target","rel","GithubProfileDetails","props","followers","public_repos","public_gists","following","location","email","company","blog","created_at","GithubProfile","GithubRepos","reposInfo","length","map","repo","stargazers_count","watchers_count","clientSecret","Spinner","spinnerImage","GithubSearchApp","dispatch","useDispatch","useState","username","setUsername","githubStore","onSubmit","e","preventDefault","type","dataURL","Axios","get","then","response","payload","data","catch","error","fetchProfile","fetchRepos","value","onChange","size","placeholder","Object","keys","rootReducer","combineReducers","action","middleWares","logger","thunk","store","createStore","composeWithDevTools","applyMiddleware","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7535c0d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.26ef8bb4.gif\";","import {\n  FETCH_PROFILE_FAILURE,\n  FETCH_PROFILE_REQUEST,\n  FETCH_PROFILE_SUCCESS,\n  FETCH_REPOS_FAILURE,\n  FETCH_REPOS_REQUEST,\n  FETCH_REPOS_SUCCESS,\n} from \"./github.actionTypes\";\n\nexport const GITHUB_FEATURE_KEY = \"github\";\nlet initialState = {\n  loading: false,\n  profile: {},\n  repos: [],\n  errorMessage: \"\",\n};\n\nlet githubReducer = (state = initialState, action) => {\n  let { type, payload } = action;\n  switch (type) {\n    case FETCH_PROFILE_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case FETCH_PROFILE_SUCCESS:\n      return {\n        ...state,\n        profile: payload,\n      };\n    case FETCH_PROFILE_FAILURE:\n      return {\n        ...state,\n        errorMessage: payload,\n      };\n    case FETCH_REPOS_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case FETCH_REPOS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        repos: payload,\n      };\n    case FETCH_REPOS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        errorMessage: payload,\n      };\n    default:\n      return state;\n  }\n};\nexport { githubReducer };\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { GITHUB_FEATURE_KEY } from \"../Redux/github/github.reducer\";\r\n\r\nlet GithubProfileCard = () => {\r\n  // fetch data directly from REDUX store\r\n  let profileInfo = useSelector((state) => {\r\n    return state[GITHUB_FEATURE_KEY];\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"card\">\r\n        <img\r\n          src={profileInfo.profile.avatar_url}\r\n          alt=\"\"\r\n          className=\"img-fluid\"\r\n        />\r\n        <div className=\"card-body\">\r\n          <p className=\"h4\">{profileInfo.profile.name}</p>\r\n          <p>{profileInfo.profile.bio}</p>\r\n          <a\r\n            href={profileInfo.profile.html_url}\r\n            className=\"btn btn-success btn-sm\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Profile\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default GithubProfileCard;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { GITHUB_FEATURE_KEY } from \"../Redux/github/github.reducer\";\r\n\r\nlet GithubProfileDetails = (props) => {\r\n  // fetch data directly from REDUX store\r\n  let profileInfo = useSelector((state) => {\r\n    return state[GITHUB_FEATURE_KEY];\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">\r\n          <span className=\"badge badge-success mx-1\">\r\n            Followers : {profileInfo.profile?.followers}\r\n          </span>\r\n          <span className=\"badge badge-primary mx-1\">\r\n            Repos : {profileInfo.profile?.public_repos}\r\n          </span>\r\n          <span className=\"badge badge-warning mx-1\">\r\n            Gists : {profileInfo.profile?.public_gists}\r\n          </span>\r\n          <span className=\"badge badge-danger mx-1\">\r\n            Following : {profileInfo.profile?.following}\r\n          </span>\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <ul className=\"list-group\">\r\n            <li className=\"list-group-item\">\r\n              NAME : {profileInfo.profile?.name}\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              Location : {profileInfo.profile?.location}\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              Email : {profileInfo.profile?.email}\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              Company :{\" \"}\r\n              <a href=\"!#\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {profileInfo.profile?.company}\r\n              </a>\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              Blog :{\" \"}\r\n              <a href=\"!#\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {profileInfo.profile?.blog}\r\n              </a>\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              Member Since : {profileInfo.profile?.created_at}\r\n            </li>\r\n            <li className=\"list-group-item\">\r\n              Profile URL :{\" \"}\r\n              <a href=\"!#\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                {profileInfo.profile?.html_url}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default GithubProfileDetails;\r\n","import React from \"react\";\r\nimport GithubProfileCard from \"./GithubProfileCard\";\r\nimport GithubProfileDetails from \"./GithubProfileDetails\";\r\n\r\nlet GithubProfile = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"row\">\r\n        <div className=\"col-md-3\">\r\n          <GithubProfileCard />\r\n        </div>\r\n        <div className=\"col-md-9\">\r\n          <GithubProfileDetails />\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default GithubProfile;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { GITHUB_FEATURE_KEY } from \"../Redux/github/github.reducer\";\r\n\r\nlet GithubRepos = () => {\r\n  // fetch data directly from REDUX store\r\n  let reposInfo = useSelector((state) => {\r\n    return state[GITHUB_FEATURE_KEY];\r\n  });\r\n  return (\r\n    <React.Fragment>\r\n      {reposInfo.repos.length > 0 ? (\r\n        <React.Fragment>\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <div className=\"card mt-3\">\r\n                <div className=\"card-header\">\r\n                  <p className=\"h4\">Your Repositories</p>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                  <ul className=\"list-group\">\r\n                    {reposInfo.repos.map((repo) => {\r\n                      return (\r\n                        <li className=\"list-group-item d-flex justify-content-around\">\r\n                          <p className=\"h5\">\r\n                            <a\r\n                              href={repo.html_url}\r\n                              target=\"_blank\"\r\n                              rel=\"noopener noreferrer\"\r\n                            >\r\n                              {repo.name}\r\n                            </a>\r\n                          </p>\r\n                          <span className=\"badge badge-success\">\r\n                            {repo.stargazers_count} Stars\r\n                          </span>\r\n                          <span className=\"badge badge-primary\">\r\n                            {repo.watchers_count} Watches\r\n                          </span>\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      ) : null}\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default GithubRepos;\r\n","export const clientID = \"e04b79240de68feb32a2\";\r\nexport const clientSecret = \"b27854a3559a3608e14db767c9317624eb15bddf\";\r\n","import React from \"react\";\r\nimport spinnerImage from '../../assets/img/spinner.gif';\r\n\r\nlet Spinner = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                <img src={spinnerImage} alt=\"\" className=\"d-block m-auto\"/>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n};\r\nexport default Spinner;\r\n","import React, { useState } from \"react\";\r\n\r\nimport GithubProfile from \"./GithubProfile\";\r\nimport GithubRepos from \"./GithubRepos\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchProfile, fetchRepos } from \"../Redux/github/github.action\";\r\nimport { GITHUB_FEATURE_KEY } from \"../Redux/github/github.reducer\";\r\nimport Spinner from \"./spinner/Spinner\";\r\n\r\nlet GithubSearchApp = () => {\r\n  let dispatch = useDispatch();\r\n  let [username, setUsername] = useState(\"\");\r\n  let githubStore = useSelector((state) => {\r\n    return state[GITHUB_FEATURE_KEY];\r\n  });\r\n\r\n  let searchUser = (e) => {\r\n    e.preventDefault();\r\n    dispatch(fetchProfile(username));\r\n    dispatch(fetchRepos(username));\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"container mt-3\">\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <div className=\"card\">\r\n              <div className=\"card-header bg-dark bg-transparent text-white\">\r\n                <p className=\"h4\">Github Search</p>\r\n              </div>\r\n              <div className=\"card-body\">\r\n                <form className=\"form-inline\" onSubmit={searchUser}>\r\n                  <div className=\"form-group\">\r\n                    <input\r\n                      value={username}\r\n                      onChange={(e) => setUsername(e.target.value)}\r\n                      size=\"40\"\r\n                      type=\"search\"\r\n                      className=\"form-control\"\r\n                      placeholder=\"Username\"\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <input\r\n                      type=\"submit\"\r\n                      value=\"Search\"\r\n                      className=\"btn bg-dark bg-transparent text-white btn-sm\"\r\n                    />\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <React.Fragment>\r\n          <div className=\"row mt-3\">\r\n            <div className=\"col\">\r\n              {Object.keys(githubStore.profile).length !== 0 ? (\r\n                <React.Fragment>\r\n                  {githubStore.loading ? (\r\n                    <Spinner />\r\n                  ) : (\r\n                    <React.Fragment>\r\n                      <GithubProfile />\r\n                    </React.Fragment>\r\n                  )}\r\n                </React.Fragment>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n          <div className=\"row mt-3\">\r\n            <div className=\"col\">\r\n              {githubStore.repos.length > 0 ? (\r\n                <React.Fragment>\r\n                  {githubStore.loading ? (\r\n                    <Spinner />\r\n                  ) : (\r\n                    <React.Fragment>\r\n                      <GithubRepos />\r\n                    </React.Fragment>\r\n                  )}\r\n                </React.Fragment>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        </React.Fragment>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\nexport default GithubSearchApp;\r\n","import {\n  FETCH_PROFILE_FAILURE,\n  FETCH_PROFILE_REQUEST,\n  FETCH_PROFILE_SUCCESS,\n  FETCH_REPOS_FAILURE,\n  FETCH_REPOS_REQUEST,\n  FETCH_REPOS_SUCCESS,\n} from \"./github.actionTypes\";\nimport Axios from \"axios\";\nimport { clientID, clientSecret } from \"../../components/githubCredentials\";\n\n// fetch a profile\nlet fetchProfile = (username) => {\n  return (dispatch) => {\n    dispatch({ type: FETCH_PROFILE_REQUEST });\n    let dataURL = `https://api.github.com/users/${username}?clientId=${clientID}&clientSecret=${clientSecret}`;\n    Axios.get(dataURL)\n      .then((response) => {\n        dispatch({ type: FETCH_PROFILE_SUCCESS, payload: response.data });\n      })\n      .catch((error) => {\n        dispatch({ type: FETCH_PROFILE_FAILURE, payload: error });\n      });\n  };\n};\n\n// fetch repos of user\nlet fetchRepos = (username) => {\n  return (dispatch) => {\n    dispatch({ type: FETCH_REPOS_REQUEST });\n    let dataURL = `https://api.github.com/users/${username}/repos?clientId=${clientID}&clientSecret=${clientSecret}`;\n    Axios.get(dataURL)\n      .then((response) => {\n        dispatch({ type: FETCH_REPOS_SUCCESS, payload: response.data });\n      })\n      .catch((error) => {\n        dispatch({ type: FETCH_REPOS_FAILURE, payload: error });\n      });\n  };\n};\nexport { fetchProfile, fetchRepos };\n","export const FETCH_PROFILE_REQUEST = \"FETCH_PROFILE_REQUEST\";\nexport const FETCH_PROFILE_SUCCESS = \"FETCH_PROFILE_SUCCESS\";\nexport const FETCH_PROFILE_FAILURE = \"FETCH_PROFILE_FAILURE\";\n\nexport const FETCH_REPOS_REQUEST = \"FETCH_REPOS_REQUEST\";\nexport const FETCH_REPOS_SUCCESS = \"FETCH_REPOS_SUCCESS\";\nexport const FETCH_REPOS_FAILURE = \"FETCH_REPOS_FAILURE\";\n","import { combineReducers } from \"redux\";\nimport { GITHUB_FEATURE_KEY, githubReducer } from \"./github/github.reducer\";\n\nlet rootReducer = combineReducers({\n  [GITHUB_FEATURE_KEY]: githubReducer,\n});\n\nexport { rootReducer };\n","import { applyMiddleware, createStore } from \"redux\";\nimport { rootReducer } from \"./root.reducer\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport logger from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nlet middleWares = [logger, thunk];\nlet store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(...middleWares))\n);\nexport { store };\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport \"./App.css\";\nimport GithubSearchApp from \"./components/GithubSearchApp\";\nimport { store } from \"./Redux/store\";\n\nlet App = () => {\n  return (\n    <React.Fragment>\n      {/* <nav className=\"navbar navbar-dark bg-dark navbar-expand-sm\">\n        <a href=\"/\" className=\"navbar-brand\">\n          React Hooks with Github Profile Search\n        </a>\n      </nav> */}\n      <Provider store={store}>\n        <GithubSearchApp />\n      </Provider>\n    </React.Fragment>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// MDBootstrap css files\nimport './bootstrap/css/font-awesome-5.8.1.css';\nimport 'mdbootstrap/css/bootstrap.css';\nimport 'mdbootstrap/css/mdb.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}